{"version":3,"sources":["components/Section.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Notification.js","App.js","index.js"],"names":["Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","Notification","message","App","state","handleClick","event","target","setState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Object","keys","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAaeA,EAXC,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OACZ,oCACI,6BAAKD,IACJC,MCgBMC,EAnBI,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,IAAKC,EAAtB,EAAsBA,MAAOC,EAA7B,EAA6BA,mBAA7B,OACf,qCACI,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,YCcOC,EApBS,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAASC,EAAX,EAAWA,gBAAX,OACpB,mCACKD,EAAQE,KAAI,SAAAC,GAAM,OACf,wBAEIC,KAAK,SACLC,KAAMF,EACNG,QAASL,EAJb,SAMKE,GALIA,SCINI,EARM,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OACjB,4BAAIA,KCuDOC,E,4MAnDbC,MAAQ,CACNhB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPe,YAAc,SAAAC,GACZ,IAAMP,EAAOO,EAAMC,OAAOR,KAC1B,EAAKS,UAAS,SAAAJ,GAAK,kCACdA,GADc,kBAEhBL,EAAO,EAAKK,MAAML,GAAQ,Q,EAI/BU,mBAAqB,kBACrB,EAAKL,MAAMhB,KAAK,EAAKgB,MAAMf,QAAQ,EAAKe,MAAMd,K,EAE9CoB,gCAAkC,kBAChC,EAAKN,MAAMhB,KACPuB,KAAKC,MAAO,EAAKR,MAAMhB,KAAK,EAAKqB,qBAAsB,KACvD,G,4CAEN,WAAU,IAAD,EACwBI,KAAKT,MAA5BhB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACE,qCACE,cAAC,EAAD,CAASL,MAAQ,wBAAjB,SACE,cAAC,EAAD,CACES,QAASoB,OAAOC,KAAKF,KAAKT,OAC1BT,gBAAiBkB,KAAKR,gBAGzBQ,KAAKJ,qBACJ,cAAC,EAAD,CAASxB,MAAQ,aAAjB,SACE,cAAC,EAAD,CACAG,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOsB,KAAKJ,qBACZjB,mBAAoBqB,KAAKH,sCAIzB,cAAC,EAAD,CAAcR,QAAQ,6B,GA5ChBc,a,YCAlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.fc427cf2.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nconst Section = ({title, children})=> (\r\n    <section>\r\n        <h2>{title}</h2>\r\n        {children}\r\n    </section>\r\n);\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Section;","import PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({good, neutral, bad, total, positivePercentage})=>(\r\n    <>\r\n        <p>Good: {good}</p>\r\n        <p>Neutral: {neutral}</p>\r\n        <p>Bad: {bad}</p>\r\n        <p>Total: {total}</p>\r\n        <p>Positive feedback: {positivePercentage} %</p>\r\n    </>\r\n);\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired\r\n}\r\n\r\n\r\nexport default Statistics;","import PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({options, onLeaveFeedback})=>(\r\n    <>\r\n        {options.map(option=>(\r\n            <button \r\n                key={option} \r\n                type=\"button\" \r\n                name={option}\r\n                onClick={onLeaveFeedback}\r\n            >\r\n                {option}\r\n            </button>\r\n        ))}\r\n    </>\r\n);\r\n\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n    onLeaveFeedback: PropTypes.func.isRequired\r\n};\r\n\r\nexport default FeedbackOptions;","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({message})=>(\r\n    <p>{message}</p>\r\n);\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Notification;","import React, { Component } from 'react';\nimport Section from './components/Section';\nimport Statistics from './components/Statistics/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Notification from './components/Statistics/Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  };\n\n  handleClick = event => {\n    const name = event.target.name;\n    this.setState(state => ({\n      ...state,\n      [name]: this.state[name] + 1\n    }));\n  };\n\n  countTotalFeedback = ()=>\n  this.state.good+this.state.neutral+this.state.bad;\n\n  countPositiveFeedbackPercentage = ()=>\n    this.state.good\n      ? Math.round((this.state.good/this.countTotalFeedback())*100)\n      : 0;\n \n  render (){\n    const { good, neutral, bad } = this.state;\n    return (\n      <>\n        <Section title = 'Please leave feedback'>\n          <FeedbackOptions \n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.handleClick}\n          />\n        </Section>\n        {this.countTotalFeedback() ? (\n          <Section title = 'Statistics'>\n            <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={this.countTotalFeedback()}\n            positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          </Section>\n          ) : (\n            <Notification message=\"No feedback given\"/>\n          )\n        }\n      </>\n    );\n  }\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}